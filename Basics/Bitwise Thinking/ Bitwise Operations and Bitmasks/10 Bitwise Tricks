---------------------------------------------
**01. Check if a number is EVEN or ODD
    ~>  (x&1)? odd:even;
---------------------------------------------
**02. Check if a number is power of 2
    ~>  x&(x-1) ? no:yes;
    exp: x=10, x-1=9;
        1010 & 1001 -> 1000 != 0
    exp: x=8, x-1=7;
        1000 & 0111 -> 0000 == 0 
------------------------------------------------
**03. Playing with the k-th bit::[(1<<k)=2^k]
    i) check if the k-th bit is set_  n&(1<<k) ? yes:no;
    ii) Toggle the k-th bit_   n^(1<<k)
    iii) set the k-th bit_   n|(1<<k)
    iv) unset the k-th bit_  n&~(1<<k)
------------------------------------------------------
**04. Multiply or Divide a number by 2^k
    ~> Multiplication:   (x<<k) left-shift
    ~> Division:         (x>>k) right-shift
-------------------------------------------------------
**05. Find out modulo of (N % 2^k)

   cout<< N&((1<<k)-1) <<endl;

    (64*2^k) (32*2^k)      ! 
    exp:  `1 0 `1 0 1 1 0  1  0 1 0 0 0
           0 0  0 0 0 0 0  0  1 1 1 1 1   ~>[(1<<k)-1]
          ______________________________
           0 0  0 0 0 0 0  0  0 1 0 0 0   ~> Reminder

----------------------------------------------------------
**06. Swapping two Number X and Y without temp variable
    ~>    x = x^y  ____ { x=x^y , y=y } 
          y = x^y  ____ { y=x^y^y , x=x^y } -> y=x;
          x = x^y  ____ { x=x^y^x , y=x }  -> x=y;
-------------------------------------------------------------
**07. Property: No. of set bits in A = X
                No. of set bits in B = Y
        
    ~>    `Number of set bits in (A^B) is Even if X+Y is Even
          `Number of set bits in (A^B) is Odd if X+Y is Odd
                        1100110001
                        0100110010        Z = X+Y-2*x
                      __1x__xx__11__        = 3

                X+Y==9 <~[odd]~> Z==3
--------------------------------------------------------------------
**08. if X==A then assign X=B and if X==B then assign X=A
                            ::>  x=a^a^b;  x=a^b^b
    ~>  X = A^B^X          
---------------------------------------------------------------------
**09. Two useful identities
    ~>  A+B = (A^B)+2(A&B)
    ~>  A+B = (A|B)+(A&B)
---------------------------------------------------------
**10. Find out the number of set bits in a Number X
    ~>   __builtin_popcount(X)        ->  integer
         __builtin_popcountll(X)      ->  long long
---------------------------------------------------------

~> There are also __builtin_clz(X) and __builtin_ctz(X) (and their long long versions)
     for counting the number of leading or trailing zeros in a positive number.







